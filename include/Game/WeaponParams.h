#pragma once

#include "types.h"

namespace Game {
	template<typename T>
	class WeaponParam{
		public:
		_BYTE _0[0x2C];
		T mValue;
	};
	class MainWeaponParameters{
		_BYTE _0[0xD0];
	};
	class MainWeaponShooterParamaters : public MainWeaponParameters{
		public:
		WeaponParam<int> mVariableShotFrame;
		WeaponParam<int> mAutoShot;
		WeaponParam<int> mRepeatFrame;
		WeaponParam<int> mTripleShotSpan;
		WeaponParam<float> mInitVel;
		WeaponParam<float> mDegRandom;
		WeaponParam<float> mDegJumpRandom;
		WeaponParam<int> mSplashSplitNum;
		WeaponParam<int> mKnockBack;
		WeaponParam<float> mStraightStateEndSpeed;
		WeaponParam<float> mInkConsume;
		WeaponParam<int> mInkRecoverStop;
		WeaponParam<float> mMoveSpeed;
		WeaponParam<int> mDamageMax;
		WeaponParam<int> mDamageMin;
		WeaponParam<int> mDamageReduceEndFrame;
		WeaponParam<int> mStraightFrame;
		WeaponParam<int> mGuideCheckCollisionFrame;
		WeaponParam<int> mDamageReduceStartFrame;
		WeaponParam<float> mCreateSplashNum;
		WeaponParam<float> mCreateSplashLength;
		WeaponParam<int> mNearestSplahSplitLength;
		WeaponParam<int> mForceDropNearestSplashAddNum;
		WeaponParam<float> mDrawRadius;
		WeaponParam<float> mColRadius;
		WeaponParam<float> mPlayerColRadius;
		WeaponParam<float> mPaintNearDistance;
		WeaponParam<float> mPaintFarDistance;
		WeaponParam<float> mPaintNearRadius;
		WeaponParam<float> mPaintFarRadius;
		WeaponParam<float> mSplashDrawRadius;
		WeaponParam<float> mSplashColRadius;
		WeaponParam<float> mSplashPaintRadius;
		WeaponParam<float> mNearestSplashPaintRadiusTimes;
		WeaponParam<float> mSplashMaxScaleHighest;
		WeaponParam<float> mSplashMinScaleHighest;
		WeaponParam<float> mSplashMaxScaleClamp;
		WeaponParam<float> mSplashMinScaleClamp;
		WeaponParam<float> mNearestSplashMaxScaleClamp;
		WeaponParam<int> mBurstAimMoveFrm;
		WeaponParam<float> mDegBiasMin;
		WeaponParam<float> mDegBias;
		WeaponParam<float> mDegBiasKf;
		WeaponParam<float> mDegBiasDecrease;
		WeaponParam<float> mDegJumpBias;
		WeaponParam<int> mDegJumpBiasStartFrame;
		WeaponParam<int> mDegJumpBiasFrame;
		WeaponParam<float> mCoopInkConsume;
		WeaponParam<int> mCoopDamageMax;
		WeaponParam<int> mCoopDamageMin;
	};
	class MainWeaponTwinsParameters : public MainWeaponParameters{
		public:
		WeaponParam<int> mSideStepChargeFrm;
		WeaponParam<float> mSideStepMoveDist;
		WeaponParam<float> mSideStepMoveStepKd;
		WeaponParam<int> mSideStepMoveFrm;
		WeaponParam<float> mSideStepTimeScale;
		WeaponParam<int> mSideStepTimeScaleFrm;
		WeaponParam<float> mSideStepInkConsume;
		WeaponParam<int> mSideStepInkRecoverStop;
		WeaponParam<float> mSideStepSlideMoveDistGnd;
		WeaponParam<float> mSideStepSlideMoveDistAir;
		WeaponParam<int> mSideStepSlideMoveFrm;
		WeaponParam<int> mSideStepRepeatCnt;
		WeaponParam<int> mSideStepInputReqAcceptFrm;
		WeaponParam<float> mSideStepUnrelaxMoveVelGnd;
		WeaponParam<int> mSideStepUnrelaxMoveJumpGnd;
		WeaponParam<int> mSideStepUnrelaxFrmMove;
		WeaponParam<int> mSideStepUnrelaxFrmNoWeapon;
		WeaponParam<int> mSideStepUnrelaxFrmNoSquid;
		WeaponParam<int> mSideStepUnrelaxFrmNoSideStep;
		WeaponParam<int> mSideStepUnrelaxFrmOneMuzzle;
		WeaponParam<int> mSideStepUnrelaxFrmMove2;
		WeaponParam<int> mSideStepUnrelaxFrmNoWeapon2;
		WeaponParam<int> mSideStepUnrelaxFrmNoSquid2;
		WeaponParam<int> mSideStepUnrelaxFrmNoSideStep2;
		WeaponParam<int> mSideStepUnrelaxFrmOneMuzzle2;
		WeaponParam<int> mSideStepOneMuzzleDegRandom;
		WeaponParam<float> mSideStepDropSplashBulletSpeed;
		WeaponParam<float> mSideStepDropSplashBulletColRadius;
		WeaponParam<float> mSideStepDropSplashBulletPaintRadius;
		WeaponParam<float> mSideStepDropSplashBulletPaintDepthScaleRate;
		WeaponParam<int> mSideStepOneMuzzleRepeatFrame;
		WeaponParam<int> mSideStepOneMuzzleDamageMax;
		WeaponParam<int> mSideStepOneMuzzleDamageMin;
		WeaponParam<float> mSideStepOneMuzzleInitVel;
		WeaponParam<float> mSideStepOneMuzzleStraightStateEndSpeed;
		WeaponParam<float> mSideStepOneMuzzleCreateSplashNum;
		WeaponParam<int> mSideStepOneMuzzleCreateSplashLength;
		WeaponParam<int> mCoopSideStepOneMuzzleDamageMax;
		WeaponParam<int> mCoopSideStepOneMuzzleDamageMin;
		WeaponParam<int> mIsShootableInMove;
	};
	class MainWeaponRollerCommonParameters : public MainWeaponParameters{
		public:
		WeaponParam<float> mCorePaintWidthHalf;
		WeaponParam<float> mCorePaintSlowMoveWidthHalf;
		WeaponParam<int> mSlowMoveSpeed;
		WeaponParam<float> mCoreColWidthHalf;
		WeaponParam<float> mInkConsumeCoreMin;
		WeaponParam<float> mInkConsumeCoreMax;
		WeaponParam<float> mInkConsumeCoreMinSpeed;
		WeaponParam<float> mInkConsumeCoreMaxSpeed;
		WeaponParam<int> mInkRecoverCoreStop;
		WeaponParam<float> mMoveSpeed;
		WeaponParam<float> mDashSpeed;
		WeaponParam<int> mShotDashTransFrm;
		WeaponParam<float> mDashTurnBrkMoveVel;
		WeaponParam<float> mCoreColRadius;
		WeaponParam<int> mCoreDamage;
		WeaponParam<float> mCoreDamageMaxPlayerSpeedRate;
		WeaponParam<float> mCoreDamageMinPlayerSpeedRate;
		WeaponParam<float> mCoreDamageMinRate;
		WeaponParam<int> mPaintBrushType;
		WeaponParam<int> mPaintBrushRotYDegree;
		WeaponParam<int> mPaintBrushSwingRepeatFrame;
		WeaponParam<float> mPaintBrushMoveSwingVelGnd;
		WeaponParam<int> mPaintBrushNoOpInkEffect;
		WeaponParam<int> mPaintNearestSplashLoopNum;
		WeaponParam<int> mPaintNearestSplashOrderNum;
		WeaponParam<float> mPaintNearestSplashCameraRate;
		WeaponParam<float> mPaintNearestSplashRadius;
		WeaponParam<float> mPaintNearestSplashPaintScale;
		WeaponParam<int> mPaintNearestSplashPosOffset;
		WeaponParam<float> mPaintNearestSplashValidHeight;
		WeaponParam<int> mMostSpeedSplashCreateSplashNum;
		WeaponParam<float> mMostSpeedSplashCreateSplashLengthFirst;
		WeaponParam<float> mMostSpeedSplashCreateSplashLength;
		WeaponParam<float> mMostSpeedSplashSplashDrawRadius;
		WeaponParam<float> mMostSpeedSplashSplashColRadius;
		WeaponParam<float> mMostSpeedSplashSplashPaintRadius;
		WeaponParam<float> mMostSpeedSplashSplashPaintScale;
		WeaponParam<float> mTailMaxLength;
		WeaponParam<int> mTailFrame;
		WeaponParam<float> mCoopInkConsumeCoreMin;
		WeaponParam<float> mCoopInkConsumeCoreMax;
		WeaponParam<int> mCoopCoreDamage;
		WeaponParam<int> mWalkDuringSwingAerial;
	};
	class MainWeaponRollerSwingParameters : public MainWeaponParameters{
		public:
		WeaponParam<int> mSplash_A_PositionWidth;
		WeaponParam<int> mSplash_B_PositionWidth;
		WeaponParam<int> mSplash_C_PositionWidth;
		WeaponParam<int> mSplash_D_PositionWidth;
		WeaponParam<int> mSplash_A_PositionOffset;
		WeaponParam<int> mSplash_B_PositionOffset;
		WeaponParam<int> mSplash_C_PositionOffset;
		WeaponParam<int> mSplash_D_PositionOffset;
		WeaponParam<int> mSplash_A_PositionWidthY;
		WeaponParam<int> mSplash_B_PositionWidthY;
		WeaponParam<int> mSplash_C_PositionWidthY;
		WeaponParam<int> mSplash_D_PositionWidthY;
		WeaponParam<int> mSplash_A_PositionOffsetY;
		WeaponParam<int> mSplash_B_PositionOffsetY;
		WeaponParam<int> mSplash_C_PositionOffsetY;
		WeaponParam<int> mSplash_D_PositionOffsetY;
		WeaponParam<int> mSplash_A_Num;
		WeaponParam<int> mSplash_B_Num;
		WeaponParam<int> mSplash_C_Num;
		WeaponParam<int> mSplash_D_Num;
		WeaponParam<int> mSplash_A_NumDepletion;
		WeaponParam<int> mSplash_B_NumDepletion;
		WeaponParam<int> mSplash_C_NumDepletion;
		WeaponParam<int> mSplash_D_NumDepletion;
		WeaponParam<float> mSplash_A_InitSpeedBase;
		WeaponParam<float> mSplash_B_InitSpeedBase;
		WeaponParam<float> mSplash_C_InitSpeedBase;
		WeaponParam<float> mSplash_D_InitSpeedBase;
		WeaponParam<int> mSplash_A_InitSpeedOffset;
		WeaponParam<int> mSplash_B_InitSpeedOffset;
		WeaponParam<int> mSplash_C_InitSpeedOffset;
		WeaponParam<int> mSplash_D_InitSpeedOffset;
		WeaponParam<float> mSplash_A_InitSpeedRandomZ;
		WeaponParam<float> mSplash_B_InitSpeedRandomZ;
		WeaponParam<float> mSplash_C_InitSpeedRandomZ;
		WeaponParam<float> mSplash_D_InitSpeedRandomZ;
		WeaponParam<int> mSplash_A_InitSpeedRandomXRateZ;
		WeaponParam<int> mSplash_B_InitSpeedRandomXRateZ;
		WeaponParam<int> mSplash_C_InitSpeedRandomXRateZ;
		WeaponParam<int> mSplash_D_InitSpeedRandomXRateZ;
		WeaponParam<int> mSplash_A_InitSpeedNoRandomNum;
		WeaponParam<int> mSplash_B_InitSpeedNoRandomNum;
		WeaponParam<int> mSplash_C_InitSpeedNoRandomNum;
		WeaponParam<int> mSplash_D_InitSpeedNoRandomNum;
		WeaponParam<int> mSplash_A_InitVecYRate;
		WeaponParam<int> mSplash_B_InitVecYRate;
		WeaponParam<int> mSplash_C_InitVecYRate;
		WeaponParam<int> mSplash_D_InitVecYRate;
		WeaponParam<float> mSplash_A_Deg;
		WeaponParam<float> mSplash_B_Deg;
		WeaponParam<float> mSplash_C_Deg;
		WeaponParam<float> mSplash_D_Deg;
		WeaponParam<int> mSplash_A_DefaultDeg;
		WeaponParam<int> mSplash_B_DefaultDeg;
		WeaponParam<int> mSplash_C_DefaultDeg;
		WeaponParam<int> mSplash_D_DefaultDeg;
		WeaponParam<int> mSplash_A_InitAddDegXBase;
		WeaponParam<int> mSplash_B_InitAddDegXBase;
		WeaponParam<int> mSplash_C_InitAddDegXBase;
		WeaponParam<int> mSplash_D_InitAddDegXBase;
		WeaponParam<int> mSplash_A_InitAddDegXOffset;
		WeaponParam<int> mSplash_B_InitAddDegXOffset;
		WeaponParam<int> mSplash_C_InitAddDegXOffset;
		WeaponParam<int> mSplash_D_InitAddDegXOffset;
		WeaponParam<int> mSplash_A_OrderNoRandomNum;
		WeaponParam<int> mSplash_B_OrderNoRandomNum;
		WeaponParam<int> mSplash_C_OrderNoRandomNum;
		WeaponParam<int> mSplash_D_OrderNoRandomNum;
		WeaponParam<int> mSplash_A_FirstAroundBulletNum;
		WeaponParam<int> mSplash_B_FirstAroundBulletNum;
		WeaponParam<int> mSplash_C_FirstAroundBulletNum;
		WeaponParam<int> mSplash_D_FirstAroundBulletNum;
		WeaponParam<int> mSplash_A_FirstAroundTotalNum;
		WeaponParam<int> mSplash_B_FirstAroundTotalNum;
		WeaponParam<int> mSplash_C_FirstAroundTotalNum;
		WeaponParam<int> mSplash_D_FirstAroundTotalNum;
		WeaponParam<int> mSplash_A_FirstAroundCenterCollisionRadius;
		WeaponParam<int> mSplash_B_FirstAroundCenterCollisionRadius;
		WeaponParam<int> mSplash_C_FirstAroundCenterCollisionRadius;
		WeaponParam<int> mSplash_D_FirstAroundCenterCollisionRadius;
		WeaponParam<int> mSplash_A_FirstAroundAroundCollisionOffset;
		WeaponParam<int> mSplash_B_FirstAroundAroundCollisionOffset;
		WeaponParam<int> mSplash_C_FirstAroundAroundCollisionOffset;
		WeaponParam<int> mSplash_D_FirstAroundAroundCollisionOffset;
		WeaponParam<int> mSplash_A_FirstAroundAroundCollisionRadius;
		WeaponParam<int> mSplash_B_FirstAroundAroundCollisionRadius;
		WeaponParam<int> mSplash_C_FirstAroundAroundCollisionRadius;
		WeaponParam<int> mSplash_D_FirstAroundAroundCollisionRadius;
		WeaponParam<int> mSwingLiftFrame;
		WeaponParam<float> mSplashInitSpeedDepletionRate;
		WeaponParam<float> mGroundSwingMoveSpeed;
		WeaponParam<float> mInkConsumeSplash;
		WeaponParam<int> mInkConsumeSplashDepletionPercent;
		WeaponParam<int> mInkRecoverSplashStop;
		WeaponParam<float> mTargetEffectScale;
		WeaponParam<int> mTargetEffectFrame;
		//unfinished
	};
};